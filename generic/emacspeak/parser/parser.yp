#
# Copyright (C) 2017 Mike Ray <mike.ray@btinternet.com>
#
# Parse::Yapp grammar/parser/lexer for the Emacspeak text-to-speech protocol.
#
# This is free software; you can redistribute it 		and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this package; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
#
#--code--


# This is work in progress, not working yet

%{

# Package of functions to be called from semantic actions
use Emacspeak;


%}


%token INTEGER


%%

# Rules section

cmdlist
	: 
	| cmdlist cmd
	;

cmd
	: code { $_[1]; }
	| speech { $_[1]; }
	| dispatch { &tts_d; $_[1]; }
	| stop { &tts_s; $_[1]; }
	| version { &tts_version; $_[1]; }
	| silence { &tts_silence; $_[1]; }
	| beep { $_[1]; }
	| tone { $_[1]; }
	| sound { $_[1]; }
	| tts_pause { &tts_pause; $_[1]; }
	| tts_reset { &tts_reset; $_[1]; }
	| tts_resume { &tts_resume; $_[1]; }
	| tts_allcaps_beep { &tts_allcaps_beep($_[1]); $_[1]; }
	| tts_capitalize { &tts_capitalize($_[1]); $_[1]; }
	| tts_set_character_scale { $_[1]; }
	| tts_set_punctuations
		{
			&tts_set_punctuations($_[1]);
			$_[1];
		}
	| tts_set_speech_rate
		{ 
			&tts_set_speech_rate($_[1]);
				$_[1];		
		}
	| tts_split_caps { &tts_split_caps($_[1]); $_[1]; }
	| tts_sync_state { $_[1]; }
	;

code
	: 'C' '{' TEXT '}' '\n'
		{
			&tts_c($_[3]);
			$_[1];
		}
	| 'C' TEXT '\n'
		{
			&tts_c($_[2]);
			$_[1];
		}
	;

speech
	: immediate_speech { $_[1]; }
	| queued_speech { $_[1]; }
	| character { $_[1]; }
	;

immediate_speech
	: TTS_SAY '{' TEXT '}' '\n'
		{
			&tts_say($_[3]);
			$_[1];
		}
	| TTS_SAY TEXT '\n'
		{
			&tts_say($_[2]);
			$_[1];
		}
	;

character
	: 'L' '{' CHAR '}' '\n'
		{
			&tts_l($_[3]);
			$_[1];
		}
	| 'L' CHAR '\n'
		{
			&tts_l($_[2]);
			$_[1];
		}
	;

queued_speech
	: 'Q' '{' TEXT '}' '\n'
		{
			&tts_q($_[3]);
			$_[1];
		}
	| 'Q' TEXT '\n'
		{
			&tts_q($_[2]);
			$_[1];
		}
	;

dispatch
	: 'd' '\n' { $_[1]; }
	;

version
	: VERSION '\n' { $_[1]; }
	;

stop
	: 's' '\n' { $_[1]; }
	;

silence
	: SH '{' INTEGER '}' '\n' { $_[3]; }
	| SH INTEGER '\n' { $_[2]; }
	;

beep
	: 'b' '{' INTEGER INTEGER '}' '\n'
		{
			&tts_b($_[3], $_[4]);
			$_[1];
		}
	| 'b' INTEGER INTEGER '\n'
		{
			&tts_b($_[2], $_[3]);
			$_[1];
		}
	;

tone
	: 't' '{' INTEGER INTEGER '}' '\n'
		{
			&tts_t($_[3], $_[4]);
			$_[1];
		}
	| 't' INTEGER INTEGER '\n'
		{
			&tts_t($_[2], $_[3]);
			$_[1];
		}
	;

sound
	: 'a' '{' TEXT '}' '\n'
		{
			&tts_a($_[3]);
			$_[1];
		}
	| 'a' TEXT '\n'
		{
			&tts_a($_[2]);
			$_[1];
		}
	;

tts_pause
	: TTS_PAUSE '\n' { $_[1]; }
	;

tts_reset
	: TTS_RESET '\n' { $_[1]; }
	;

tts_resume
	: TTS_RESUME '\n' { $_[1]; }
	;

tts_allcaps_beep
	: TTS_ALLCAPS_BEEP '{' FLAG '}' '\n' { $_[3]; }
	| TTS_ALLCAPS_BEEP FLAG '\n' { $_[2]; }
	;

tts_capitalize
	: TTS_CAPITALIZE '{' FLAG '}' '\n' { $_[3]; }
	| TTS_CAPITALIZE FLAG '\n' { $_[2]; }
	;

tts_set_character_scale
	: TTS_SET_CHARACTER_SCALE '{' DOUBLE '}' '\n'
		{
			&tts_set_character_scale($_[3]);
			$_[1];
		}
	| TTS_SET_CHARACTER_SCALE DOUBLE '\n'
		{
			&tts_set_character_scale($_[2]);
			$_[1];
		}
	;

tts_set_punctuations
	: TTS_SET_PUNCTUATIONS '{' PUNCTLEVEL '}' '\n' { $_[3]; }
	| TTS_SET_PUNCTUATIONS PUNCTLEVEL '\n' { $_[2]; }
	;

tts_set_speech_rate
	: TTS_SET_SPEECH_RATE '{' INTEGER '}' '\n' { print "In tts_set_speech_rate\n"; $_[3]; }
	| TTS_SET_SPEECH_RATE INTEGER '\n' { $_[2]; }
	;

tts_split_caps
	: TTS_SPLIT_CAPS '{' FLAG '}' '\n' { $_[3]; }
	| TTS_SPLIT_CAPS FLAG '\n' { $_[2]; }
	;

tts_sync_state
	: TTS_SYNC_STATE '{' punctlevel FLAG FLAG FLAG INTEGER '}' '\n'
		{ 
			&tts_sync_state($_[3], $_[4], $_[5], $_[6], $_[7]);
			$_[1];
		}
	| TTS_SYNC_STATE punctlevel FLAG FLAG FLAG INTEGER '\n'
		{
			&tts_sync_state($_[2],$_[3], $_[4], $_[5], $_[6]);
			$_[1];
		}
	;

punctlevel
	: NONE
	| SOME
	| ALL
	;

%%

# Bottom section

sub _Error {
	exists $_[0]->YYData->{ERRMSG}
		and do {
			print $_[0]->YYData->{ERRMSG};
			delete $_[0]->YYData->{ERRMSG};
			return;
	};
    
	print "Syntax error.\n";

} # sub _Error

sub _Lexer {
	my($parser)=shift;

	$parser->YYData->{INPUT}
		or  $parser->YYData->{INPUT} = <STDIN>
		or  return('',undef);
	
    $parser->YYData->{INPUT}=~s/^[ \t]+//;

	for ($parser->YYData->{INPUT}) {

		# tts_say, immediate speech
		s/^(tts_say)//
		and do {
			$parser->YYData->{CONDITION} = 1;
			return('TTS_SAY',$1);
		};

		# Version, no arguments
		s/^(version)//
		and return('VERSION',$1);

		# punctuation levels
		s/^((none|some|all))//
		and do {
			return('PUNCTLEVEL',{'none'=>0,'some'=>1,'all'=>2}->{$1});
		};


		# Pause, reset and resume have no arguments

		# pause
		s/^(tts_pause)//
		and return('TTS_PAUSE',$1);

		# reset 
		s/^(tts_reset)//
		and return('TTS_RESET',$1);

		# resume 
		s/^(tts_resume)//
		and return('TTS_RESUME',$1);

		# These tts_* functions either have braces or not

		# tts_allcaps_beep
		s/^(tts_allcaps_beep)//
		and return('TTS_ALLCAPS_BEEP',$1);

		# tts_capitalize
		s/^(tts_capitalize)//
		and return('TTS_CAPITALIZE',$1);

		# tts_set_character_scale
		s/^(tts_set_character_scale)//
		and return('TTS_SET_CHARACTER_SCALE',$1);

		# tts_set_punctuations	
		s/^(tts_set_punctuations)//
		and return('TTS_SET_PUNCTUATIONS',$1);

		# tts_set_speech_rate
		s/^(tts_set_speech_rate)//
		and do {
			$parser->YYData->{CONDITION} = 1;
			return('TTS_SET_SPEECH_RATE',$1);
		};

		# tts_split_caps
		s/^(tts_split_caps)//
		and return('TTS_SPLIT_CAPS',$1);

		# tts_sync_state with or without braces but I've never seen braces

		# tts_sync_state
		s/^(tts_sync_state)//
		and return('TTS_SYNC_STATE',$1);

	# silence 'sh'
		s/^(sh)//
		and return('SH',$1);

		# Start of single-character patterns

		# Dispatch 'd'
		s/^(d)//
		and return($1,$1);

		# stop 's'
		s/^(s)//
			and return($1,$1);

		# code 'c'
		s/^(c)//
		and return($1,$1);

		# single letter 'l'
		s/^(l)//
		and return($1,$1);

		# queued speech 'q'
		s/^(q)//
		and return($1,$1);

		# tone 't' 
		s/^(t)//
		and return($1,$1);

		# beep 'b'
		s/^(b)//
		and return($1,$1);

		# sound file 'a' or 'p'
		s/^((a|p))//
		and return($1,$1);

		# numeric patterns

		# integer
		s/^([0-9][0-9]+)//
		and return('INTEGER',$1);

		# double
		s/^([-+]?([0-9]*\.[0-9]+|[0-9]+\.))//
			and return('DOUBLE',$1);

		# flag 0 or 1
		s/^([01])//
		and return('FLAG',$1);

		# Left-brace
		s/^({)//
		and return($1,$1);

		# Right-brace
		s/^(})//
		and return($1,$1);

		# newline
		s/^(\n)//s
		and do {
			$parser->YYData->{CONDITION} = 0;
			return($1,$1);
		};


	}

} # end of _Lexer

sub Run {
	my($self)=shift;
	$self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
} # end of Run

